// Code generated by codecgen - DO NOT EDIT.

package v1alpha1

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	pkg2_types "k8s.io/apimachinery/pkg/types"
	"runtime"
	"strconv"
	"time"
)

const (
	// ----- content types ----
	codecSelferCcUTF86706 = 1
	codecSelferCcRAW6706  = 0
	// ----- value types used ----
	codecSelferValueTypeArray6706  = 10
	codecSelferValueTypeMap6706    = 9
	codecSelferValueTypeString6706 = 6
	codecSelferValueTypeInt6706    = 2
	codecSelferValueTypeUint6706   = 3
	codecSelferValueTypeFloat6706  = 4
	codecSelferBitsize6706         = uint8(32 << (^uint(0) >> 63))
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct6706 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer6706 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		panic("codecgen version mismatch: current: 8, need " + strconv.FormatInt(int64(codec1978.GenVersion), 10) + ". Re-generate file: " + file)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_v1.TypeMeta
		var v1 pkg2_types.UID
		var v2 time.Time
		_, _, _ = v0, v1, v2
	}
}

func (x *Application) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				x.Kind != "",       // Kind
				x.APIVersion != "", // APIVersion
				false || x.ObjectMeta.Name != "" || x.ObjectMeta.GenerateName != "" || x.ObjectMeta.Namespace != "" || x.ObjectMeta.SelfLink != "" || x.ObjectMeta.UID != "" || x.ObjectMeta.ResourceVersion != "" || x.ObjectMeta.Generation != 0 || !(x.ObjectMeta.CreationTimestamp.IsZero()) || x.ObjectMeta.DeletionTimestamp != nil || x.ObjectMeta.DeletionGracePeriodSeconds != nil || len(x.ObjectMeta.Labels) != 0 || len(x.ObjectMeta.Annotations) != 0 || len(x.ObjectMeta.OwnerReferences) != 0 || x.ObjectMeta.Initializers != nil || len(x.ObjectMeta.Finalizers) != 0 || x.ObjectMeta.ClusterName != "",                                                                                                                                                                                                                                                                                                                                                                                                                                             // ObjectMeta
				false || x.Spec.ApplicationId != "" || false || x.Spec.Stack.TypeMeta != pkg1_v1.TypeMeta{} || false || x.Spec.Stack.ObjectMeta.Name != "" || x.Spec.Stack.ObjectMeta.GenerateName != "" || x.Spec.Stack.ObjectMeta.Namespace != "" || x.Spec.Stack.ObjectMeta.SelfLink != "" || x.Spec.Stack.ObjectMeta.UID != "" || x.Spec.Stack.ObjectMeta.ResourceVersion != "" || x.Spec.Stack.ObjectMeta.Generation != 0 || !(x.Spec.Stack.ObjectMeta.CreationTimestamp.IsZero()) || x.Spec.Stack.ObjectMeta.DeletionTimestamp != nil || x.Spec.Stack.ObjectMeta.DeletionGracePeriodSeconds != nil || len(x.Spec.Stack.ObjectMeta.Labels) != 0 || len(x.Spec.Stack.ObjectMeta.Annotations) != 0 || len(x.Spec.Stack.ObjectMeta.OwnerReferences) != 0 || x.Spec.Stack.ObjectMeta.Initializers != nil || len(x.Spec.Stack.ObjectMeta.Finalizers) != 0 || x.Spec.Stack.ObjectMeta.ClusterName != "" || x.Spec.Stack.Spec != StackSpec{} || x.Spec.Stack.Status != Status{} || x.Spec.GitRepo != GitRepo{} || x.Spec.Owner != "" || x.Spec.VersioningScheme != "", // Spec
				x.Status != Status{}, // Status
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `kind`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `apiVersion`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					if false {
					} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
						z.EncExtension(yy10, yyxt11)
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `metadata`)
					r.WriteMapElemValue()
					yy12 := &x.ObjectMeta
					if false {
					} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
						z.EncExtension(yy12, yyxt13)
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `spec`)
					r.WriteMapElemValue()
					yy17 := &x.Spec
					yy17.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					yy20 := &x.Status
					yy20.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `status`)
					r.WriteMapElemValue()
					yy22 := &x.Status
					yy22.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Application) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *Application) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.TypeMeta.Kind = ""
			} else {
				x.Kind = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.TypeMeta.APIVersion = ""
			} else {
				x.APIVersion = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.ObjectMeta)); yyxt7 != nil {
					z.DecExtension(x.ObjectMeta, yyxt7)
				} else {
					z.DecFallback(&x.ObjectMeta, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ApplicationSpec{}
			} else {
				x.Spec.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = Status{}
			} else {
				x.Status.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Application) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.Kind = ""
	} else {
		x.Kind = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.APIVersion = ""
	} else {
		x.APIVersion = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.ObjectMeta)); yyxt14 != nil {
			z.DecExtension(x.ObjectMeta, yyxt14)
		} else {
			z.DecFallback(&x.ObjectMeta, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spec = ApplicationSpec{}
	} else {
		x.Spec.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Status = Status{}
	} else {
		x.Status.CodecDecodeSelf(d)
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x Language) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *Language) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (Language)(r.DecodeString())
	}
}

func (x ApplicationType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *ApplicationType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (ApplicationType)(r.DecodeString())
	}
}

func (x *ApplicationSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				true, // ApplicationId
				false || x.Stack.TypeMeta != pkg1_v1.TypeMeta{} || false || x.Stack.ObjectMeta.Name != "" || x.Stack.ObjectMeta.GenerateName != "" || x.Stack.ObjectMeta.Namespace != "" || x.Stack.ObjectMeta.SelfLink != "" || x.Stack.ObjectMeta.UID != "" || x.Stack.ObjectMeta.ResourceVersion != "" || x.Stack.ObjectMeta.Generation != 0 || !(x.Stack.ObjectMeta.CreationTimestamp.IsZero()) || x.Stack.ObjectMeta.DeletionTimestamp != nil || x.Stack.ObjectMeta.DeletionGracePeriodSeconds != nil || len(x.Stack.ObjectMeta.Labels) != 0 || len(x.Stack.ObjectMeta.Annotations) != 0 || len(x.Stack.ObjectMeta.OwnerReferences) != 0 || x.Stack.ObjectMeta.Initializers != nil || len(x.Stack.ObjectMeta.Finalizers) != 0 || x.Stack.ObjectMeta.ClusterName != "" || x.Stack.Spec != StackSpec{} || x.Stack.Status != Status{}, // Stack
				x.GitRepo != GitRepo{},   // GitRepo
				x.Owner != "",            // Owner
				x.VersioningScheme != "", // VersioningScheme
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF86706, string(x.ApplicationId))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `applicationId`)
				r.WriteMapElemValue()
				if false {
				} else {
					r.EncodeString(codecSelferCcUTF86706, string(x.ApplicationId))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					yy7 := &x.Stack
					yy7.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `stack`)
					r.WriteMapElemValue()
					yy9 := &x.Stack
					yy9.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					yy12 := &x.GitRepo
					yy12.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `gitRepo`)
					r.WriteMapElemValue()
					yy14 := &x.GitRepo
					yy14.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Owner))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `owner`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Owner))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.VersioningScheme))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `versioningScheme`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.VersioningScheme))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ApplicationSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *ApplicationSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "applicationId":
			if r.TryDecodeAsNil() {
				x.ApplicationId = ""
			} else {
				x.ApplicationId = (string)(r.DecodeString())
			}
		case "stack":
			if r.TryDecodeAsNil() {
				x.Stack = Stack{}
			} else {
				x.Stack.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				x.GitRepo = GitRepo{}
			} else {
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "owner":
			if r.TryDecodeAsNil() {
				x.Owner = ""
			} else {
				x.Owner = (string)(r.DecodeString())
			}
		case "versioningScheme":
			if r.TryDecodeAsNil() {
				x.VersioningScheme = ""
			} else {
				x.VersioningScheme = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ApplicationSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ApplicationId = ""
	} else {
		x.ApplicationId = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Stack = Stack{}
	} else {
		x.Stack.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.GitRepo = GitRepo{}
	} else {
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Owner = ""
	} else {
		x.Owner = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.VersioningScheme = ""
	} else {
		x.VersioningScheme = (string)(r.DecodeString())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ApplicationList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [4]bool{     // should field at this index be written?
				x.Kind != "",       // Kind
				x.APIVersion != "", // APIVersion
				true,               // ListMeta
				true,               // Items
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `kind`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `apiVersion`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.ListMeta
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else {
					z.EncFallback(yy10)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `metadata`)
				r.WriteMapElemValue()
				yy12 := &x.ListMeta
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					z.EncFallback(yy12)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Items == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceApplication(([]Application)(x.Items), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `items`)
				r.WriteMapElemValue()
				if x.Items == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceApplication(([]Application)(x.Items), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ApplicationList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *ApplicationList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.TypeMeta.Kind = ""
			} else {
				x.Kind = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.TypeMeta.APIVersion = ""
			} else {
				x.APIVersion = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.ListMeta)); yyxt7 != nil {
					z.DecExtension(x.ListMeta, yyxt7)
				} else {
					z.DecFallback(&x.ListMeta, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				if false {
				} else {
					h.decSliceApplication((*[]Application)(&x.Items), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ApplicationList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.Kind = ""
	} else {
		x.Kind = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.APIVersion = ""
	} else {
		x.APIVersion = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.ListMeta)); yyxt14 != nil {
			z.DecExtension(x.ListMeta, yyxt14)
		} else {
			z.DecFallback(&x.ListMeta, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		if false {
		} else {
			h.decSliceApplication((*[]Application)(&x.Items), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *GitRepo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.URL != "",          // URL
				x.SharedSecret != "", // SharedSecret
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.URL))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `url`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.URL))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.SharedSecret))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `sharedSecret`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.SharedSecret))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *GitRepo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *GitRepo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				x.URL = (string)(r.DecodeString())
			}
		case "sharedSecret":
			if r.TryDecodeAsNil() {
				x.SharedSecret = ""
			} else {
				x.SharedSecret = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *GitRepo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		x.URL = (string)(r.DecodeString())
	}
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SharedSecret = ""
	} else {
		x.SharedSecret = (string)(r.DecodeString())
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Status) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [2]bool{     // should field at this index be written?
				x.Phase != "",      // Phase
				x.StartTime != nil, // StartTime
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(2)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `phase`)
					r.WriteMapElemValue()
					x.Phase.CodecEncodeSelf(e)
				}
			}
			var yyn6 bool
			if x.StartTime == nil {
				yyn6 = true
				goto LABEL6
			}
		LABEL6:
			if yyr2 || yy2arr2 {
				if yyn6 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[1] {
						if x.StartTime == nil {
							r.EncodeNil()
						} else {
							x.StartTime.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `startTime`)
					r.WriteMapElemValue()
					if yyn6 {
						r.EncodeNil()
					} else {
						if x.StartTime == nil {
							r.EncodeNil()
						} else {
							x.StartTime.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Status) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *Status) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase.CodecDecodeSelf(d)
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if true && x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_v1.Time)
				}

				if false {
				} else if yyxt6 := z.Extension(z.I2Rtid(x.StartTime)); yyxt6 != nil {
					z.DecExtension(x.StartTime, yyxt6)
				} else if z.DecBinary() {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !z.DecBinary() && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Status) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if true && x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_v1.Time)
		}

		if false {
		} else if yyxt10 := z.Extension(z.I2Rtid(x.StartTime)); yyxt10 != nil {
			z.DecExtension(x.StartTime, yyxt10)
		} else if z.DecBinary() {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !z.DecBinary() && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	r.ReadArrayEnd()
}

func (x Phase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *Phase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (Phase)(r.DecodeString())
	}
}

func (x *Stack) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				x.Kind != "",       // Kind
				x.APIVersion != "", // APIVersion
				false || x.ObjectMeta.Name != "" || x.ObjectMeta.GenerateName != "" || x.ObjectMeta.Namespace != "" || x.ObjectMeta.SelfLink != "" || x.ObjectMeta.UID != "" || x.ObjectMeta.ResourceVersion != "" || x.ObjectMeta.Generation != 0 || !(x.ObjectMeta.CreationTimestamp.IsZero()) || x.ObjectMeta.DeletionTimestamp != nil || x.ObjectMeta.DeletionGracePeriodSeconds != nil || len(x.ObjectMeta.Labels) != 0 || len(x.ObjectMeta.Annotations) != 0 || len(x.ObjectMeta.OwnerReferences) != 0 || x.ObjectMeta.Initializers != nil || len(x.ObjectMeta.Finalizers) != 0 || x.ObjectMeta.ClusterName != "", // ObjectMeta
				x.Spec != StackSpec{}, // Spec
				x.Status != Status{},  // Status
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `kind`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `apiVersion`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					if false {
					} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
						z.EncExtension(yy10, yyxt11)
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `metadata`)
					r.WriteMapElemValue()
					yy12 := &x.ObjectMeta
					if false {
					} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
						z.EncExtension(yy12, yyxt13)
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `spec`)
					r.WriteMapElemValue()
					yy17 := &x.Spec
					yy17.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					yy20 := &x.Status
					yy20.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `status`)
					r.WriteMapElemValue()
					yy22 := &x.Status
					yy22.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Stack) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *Stack) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.TypeMeta.Kind = ""
			} else {
				x.Kind = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.TypeMeta.APIVersion = ""
			} else {
				x.APIVersion = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.ObjectMeta)); yyxt7 != nil {
					z.DecExtension(x.ObjectMeta, yyxt7)
				} else {
					z.DecFallback(&x.ObjectMeta, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = StackSpec{}
			} else {
				x.Spec.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = Status{}
			} else {
				x.Status.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Stack) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.Kind = ""
	} else {
		x.Kind = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.APIVersion = ""
	} else {
		x.APIVersion = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.ObjectMeta)); yyxt14 != nil {
			z.DecExtension(x.ObjectMeta, yyxt14)
		} else {
			z.DecFallback(&x.ObjectMeta, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spec = StackSpec{}
	} else {
		x.Spec.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Status = Status{}
	} else {
		x.Status.CodecDecodeSelf(d)
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *StackSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [8]bool{     // should field at this index be written?
				true,                     // Language
				true,                     // ApplicationType
				true,                     // SourceControl
				true,                     // BuildTool
				x.TestTool != "",         // TestTool
				true,                     // PackagingTool
				x.ImageRepo != "",        // ImageRepo
				x.VersioningScheme != "", // VersioningScheme
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.Language.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `language`)
				r.WriteMapElemValue()
				x.Language.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.ApplicationType.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `applicationType`)
				r.WriteMapElemValue()
				x.ApplicationType.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.SourceControl.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `sourceControl`)
				r.WriteMapElemValue()
				x.SourceControl.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.BuildTool.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `buildTool`)
				r.WriteMapElemValue()
				x.BuildTool.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					x.TestTool.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `testTool`)
					r.WriteMapElemValue()
					x.TestTool.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.PackagingTool.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `packagingTool`)
				r.WriteMapElemValue()
				x.PackagingTool.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					x.ImageRepo.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `imageRepo`)
					r.WriteMapElemValue()
					x.ImageRepo.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.VersioningScheme))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `versioningScheme`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.VersioningScheme))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *StackSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *StackSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "language":
			if r.TryDecodeAsNil() {
				x.Language = ""
			} else {
				x.Language.CodecDecodeSelf(d)
			}
		case "applicationType":
			if r.TryDecodeAsNil() {
				x.ApplicationType = ""
			} else {
				x.ApplicationType.CodecDecodeSelf(d)
			}
		case "sourceControl":
			if r.TryDecodeAsNil() {
				x.SourceControl = ""
			} else {
				x.SourceControl.CodecDecodeSelf(d)
			}
		case "buildTool":
			if r.TryDecodeAsNil() {
				x.BuildTool = ""
			} else {
				x.BuildTool.CodecDecodeSelf(d)
			}
		case "testTool":
			if r.TryDecodeAsNil() {
				x.TestTool = ""
			} else {
				x.TestTool.CodecDecodeSelf(d)
			}
		case "packagingTool":
			if r.TryDecodeAsNil() {
				x.PackagingTool = ""
			} else {
				x.PackagingTool.CodecDecodeSelf(d)
			}
		case "imageRepo":
			if r.TryDecodeAsNil() {
				x.ImageRepo = ""
			} else {
				x.ImageRepo.CodecDecodeSelf(d)
			}
		case "versioningScheme":
			if r.TryDecodeAsNil() {
				x.VersioningScheme = ""
			} else {
				x.VersioningScheme = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *StackSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Language = ""
	} else {
		x.Language.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ApplicationType = ""
	} else {
		x.ApplicationType.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.SourceControl = ""
	} else {
		x.SourceControl.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.BuildTool = ""
	} else {
		x.BuildTool.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TestTool = ""
	} else {
		x.TestTool.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PackagingTool = ""
	} else {
		x.PackagingTool.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ImageRepo = ""
	} else {
		x.ImageRepo.CodecDecodeSelf(d)
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.VersioningScheme = ""
	} else {
		x.VersioningScheme = (string)(r.DecodeString())
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	r.ReadArrayEnd()
}

func (x SourceControl) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *SourceControl) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (SourceControl)(r.DecodeString())
	}
}

func (x BuildTool) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *BuildTool) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (BuildTool)(r.DecodeString())
	}
}

func (x TestTool) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *TestTool) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (TestTool)(r.DecodeString())
	}
}

func (x PackagingTool) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *PackagingTool) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (PackagingTool)(r.DecodeString())
	}
}

func (x ImageRepo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *ImageRepo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (ImageRepo)(r.DecodeString())
	}
}

func (x *StackList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [4]bool{     // should field at this index be written?
				x.Kind != "",       // Kind
				x.APIVersion != "", // APIVersion
				true,               // ListMeta
				true,               // Items
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `kind`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `apiVersion`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.ListMeta
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else {
					z.EncFallback(yy10)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `metadata`)
				r.WriteMapElemValue()
				yy12 := &x.ListMeta
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					z.EncFallback(yy12)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Items == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceStack(([]Stack)(x.Items), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `items`)
				r.WriteMapElemValue()
				if x.Items == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceStack(([]Stack)(x.Items), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *StackList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *StackList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.TypeMeta.Kind = ""
			} else {
				x.Kind = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.TypeMeta.APIVersion = ""
			} else {
				x.APIVersion = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.ListMeta)); yyxt7 != nil {
					z.DecExtension(x.ListMeta, yyxt7)
				} else {
					z.DecFallback(&x.ListMeta, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				if false {
				} else {
					h.decSliceStack((*[]Stack)(&x.Items), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *StackList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.Kind = ""
	} else {
		x.Kind = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.APIVersion = ""
	} else {
		x.APIVersion = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.ListMeta)); yyxt14 != nil {
			z.DecExtension(x.ListMeta, yyxt14)
		} else {
			z.DecFallback(&x.ListMeta, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		if false {
		} else {
			h.decSliceStack((*[]Stack)(&x.Items), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *Pipeline) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [5]bool{     // should field at this index be written?
				x.Kind != "",       // Kind
				x.APIVersion != "", // APIVersion
				false || x.ObjectMeta.Name != "" || x.ObjectMeta.GenerateName != "" || x.ObjectMeta.Namespace != "" || x.ObjectMeta.SelfLink != "" || x.ObjectMeta.UID != "" || x.ObjectMeta.ResourceVersion != "" || x.ObjectMeta.Generation != 0 || !(x.ObjectMeta.CreationTimestamp.IsZero()) || x.ObjectMeta.DeletionTimestamp != nil || x.ObjectMeta.DeletionGracePeriodSeconds != nil || len(x.ObjectMeta.Labels) != 0 || len(x.ObjectMeta.Annotations) != 0 || len(x.ObjectMeta.OwnerReferences) != 0 || x.ObjectMeta.Initializers != nil || len(x.ObjectMeta.Finalizers) != 0 || x.ObjectMeta.ClusterName != "", // ObjectMeta
				false || x.Spec.Application != "" || len(x.Spec.Stage) != 0 || x.Spec.CurrentStage != "" || x.Spec.VersioningScheme != "", // Spec
				x.Status != Status{}, // Status
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(5)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `kind`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `apiVersion`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					if false {
					} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
						z.EncExtension(yy10, yyxt11)
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `metadata`)
					r.WriteMapElemValue()
					yy12 := &x.ObjectMeta
					if false {
					} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
						z.EncExtension(yy12, yyxt13)
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `spec`)
					r.WriteMapElemValue()
					yy17 := &x.Spec
					yy17.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					yy20 := &x.Status
					yy20.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `status`)
					r.WriteMapElemValue()
					yy22 := &x.Status
					yy22.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Pipeline) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *Pipeline) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.TypeMeta.Kind = ""
			} else {
				x.Kind = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.TypeMeta.APIVersion = ""
			} else {
				x.APIVersion = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.ObjectMeta)); yyxt7 != nil {
					z.DecExtension(x.ObjectMeta, yyxt7)
				} else {
					z.DecFallback(&x.ObjectMeta, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PipelineSpec{}
			} else {
				x.Spec.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = Status{}
			} else {
				x.Status.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Pipeline) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.Kind = ""
	} else {
		x.Kind = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.APIVersion = ""
	} else {
		x.APIVersion = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.ObjectMeta)); yyxt14 != nil {
			z.DecExtension(x.ObjectMeta, yyxt14)
		} else {
			z.DecFallback(&x.ObjectMeta, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spec = PipelineSpec{}
	} else {
		x.Spec.CodecDecodeSelf(d)
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Status = Status{}
	} else {
		x.Status.CodecDecodeSelf(d)
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *PipelineSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [4]bool{     // should field at this index be written?
				x.Application != "", // Application
				true,                // Stage
				true,                // CurrentStage
				x.VersioningScheme != "", // VersioningScheme
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Application))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `application`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Application))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Stage == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceStageName(([]StageName)(x.Stage), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `stages`)
				r.WriteMapElemValue()
				if x.Stage == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSliceStageName(([]StageName)(x.Stage), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				x.CurrentStage.CodecEncodeSelf(e)
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `currentStage`)
				r.WriteMapElemValue()
				x.CurrentStage.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.VersioningScheme))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `versioningScheme`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.VersioningScheme))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *PipelineSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *PipelineSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "application":
			if r.TryDecodeAsNil() {
				x.Application = ""
			} else {
				x.Application = (string)(r.DecodeString())
			}
		case "stages":
			if r.TryDecodeAsNil() {
				x.Stage = nil
			} else {
				if false {
				} else {
					h.decSliceStageName((*[]StageName)(&x.Stage), d)
				}
			}
		case "currentStage":
			if r.TryDecodeAsNil() {
				x.CurrentStage = ""
			} else {
				x.CurrentStage.CodecDecodeSelf(d)
			}
		case "versioningScheme":
			if r.TryDecodeAsNil() {
				x.VersioningScheme = ""
			} else {
				x.VersioningScheme = (string)(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *PipelineSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Application = ""
	} else {
		x.Application = (string)(r.DecodeString())
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Stage = nil
	} else {
		if false {
		} else {
			h.decSliceStageName((*[]StageName)(&x.Stage), d)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.CurrentStage = ""
	} else {
		x.CurrentStage.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.VersioningScheme = ""
	} else {
		x.VersioningScheme = (string)(r.DecodeString())
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	r.ReadArrayEnd()
}

func (x StageName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.EncExtension(x, yyxt1)
	} else {
		r.EncodeString(codecSelferCcUTF86706, string(x))
	}
}

func (x *StageName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		*x = (StageName)(r.DecodeString())
	}
}

func (x *PipelineList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		if false {
		} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
			z.EncExtension(x, yyxt1)
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false // struct tag has 'toArray'
			var yyq2 = [4]bool{     // should field at this index be written?
				x.Kind != "",       // Kind
				x.APIVersion != "", // APIVersion
				true,               // ListMeta
				true,               // Items
			}
			_ = yyq2
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(4)
			} else {
				var yynn2 int
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[0] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[0] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `kind`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferCcUTF86706, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferCcUTF86706, `apiVersion`)
					r.WriteMapElemValue()
					if false {
					} else {
						r.EncodeString(codecSelferCcUTF86706, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yy10 := &x.ListMeta
				if false {
				} else if yyxt11 := z.Extension(z.I2Rtid(yy10)); yyxt11 != nil {
					z.EncExtension(yy10, yyxt11)
				} else {
					z.EncFallback(yy10)
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `metadata`)
				r.WriteMapElemValue()
				yy12 := &x.ListMeta
				if false {
				} else if yyxt13 := z.Extension(z.I2Rtid(yy12)); yyxt13 != nil {
					z.EncExtension(yy12, yyxt13)
				} else {
					z.EncFallback(yy12)
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if x.Items == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePipeline(([]Pipeline)(x.Items), e)
					}
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferCcUTF86706, `items`)
				r.WriteMapElemValue()
				if x.Items == nil {
					r.EncodeNil()
				} else {
					if false {
					} else {
						h.encSlicePipeline(([]Pipeline)(x.Items), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *PipelineList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	if false {
	} else if yyxt1 := z.Extension(z.I2Rtid(x)); yyxt1 != nil {
		z.DecExtension(x, yyxt1)
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6706 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6706 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(errCodecSelferOnlyMapOrArrayEncodeToStruct6706)
		}
	}
}

func (x *PipelineList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		r.ReadMapElemValue()
		switch yys3 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.TypeMeta.Kind = ""
			} else {
				x.Kind = (string)(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.TypeMeta.APIVersion = ""
			} else {
				x.APIVersion = (string)(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				if false {
				} else if yyxt7 := z.Extension(z.I2Rtid(x.ListMeta)); yyxt7 != nil {
					z.DecExtension(x.ListMeta, yyxt7)
				} else {
					z.DecFallback(&x.ListMeta, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				if false {
				} else {
					h.decSlicePipeline((*[]Pipeline)(&x.Items), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *PipelineList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.Kind = ""
	} else {
		x.Kind = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TypeMeta.APIVersion = ""
	} else {
		x.APIVersion = (string)(r.DecodeString())
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		if false {
		} else if yyxt14 := z.Extension(z.I2Rtid(x.ListMeta)); yyxt14 != nil {
			z.DecExtension(x.ListMeta, yyxt14)
		} else {
			z.DecFallback(&x.ListMeta, false)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		if false {
		} else {
			h.decSlicePipeline((*[]Pipeline)(&x.Items), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer6706) encSliceApplication(v []Application, e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6706) decSliceApplication(v *[]Application, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Application{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 784)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Application, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 784)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Application, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Application{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Application{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Application, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6706) encSliceStack(v []Stack, e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6706) decSliceStack(v *[]Stack, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Stack{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 416)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Stack, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 416)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Stack, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Stack{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Stack{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Stack, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6706) encSliceStageName(v []StageName, e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yyv1.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6706) decSliceStageName(v *[]StageName, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []StageName{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]StageName, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]StageName, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]StageName, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer6706) encSlicePipeline(v []Pipeline, e *codec1978.Encoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	r.WriteArrayEnd()
}

func (x codecSelfer6706) decSlicePipeline(v *[]Pipeline, d *codec1978.Decoder) {
	var h codecSelfer6706
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Pipeline{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 360)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Pipeline, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && yyv1 == nil {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 360)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]Pipeline, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)

			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Pipeline{})
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Pipeline{}
				} else {
					yyv1[yyj1].CodecDecodeSelf(d)
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]Pipeline, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
